name: Deploy to Amazon ECS

on:
  workflow_run:
    workflows: [ "Build Maven project, dockerize & publish" ]
    branches: [ $default-branch ]
    types:
      - completed

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Download build artifacts
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: github.event.workflow_run.workflow_id

    - name: Set env
      run: |
        echo ::set-env name=AWS_REGION::eu-central-1
        echo ::set-env name=CLUSTER_NAME::dealog-dev
        echo ::set-env name=SERVICE_NAME::message-service
        echo ::set-env name=CONTAINER_NAME::message-service
        echo ::set-env name=FULL_IMAGE_NAME::$(cat ./full_image_name.txt)
        echo ::set-env name=IMAGE_TAG::$(cat ./version.txt)
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
      
    - name: Download task definition
      id: task-definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.SERVICE_NAME }} --query taskDefinition > task-definition.json
        echo "::set-output name=service_name::${{ env.SERVICE_NAME }}"
        echo "::set-output name=task_definition::task-definition.json"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-definition-update
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.task-defintion.outputs.task_definition }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ env.FULL_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-definition-update.outputs.task-definition }}
        service: ${{ steps.task-defintion.outputs.service_name }}
        cluster: ${{ env.CLUSTER_NAME }}
        wait-for-service-stability: true