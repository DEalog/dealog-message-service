# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set env
      run: |
        echo ::set-env name=VERSION::1.0.0-SNAPSHOT-$(echo $GITHUB_SHA | cut -c 1-8)
        echo ::set-env name=REGISTRY::020108638075.dkr.ecr.eu-central-1.amazonaws.com
        echo ::set-env name=IMAGE_REPO::message-service
        echo ::set-env name=AWS_REGION::eu-central-1
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
    - name: 'Create settings.xml'
      uses: whelk-io/maven-settings-xml-action@v9
      with:
        repositories: '[{ "id": "github", "name": "dealog-common", "url": "https://maven.pkg.github.com/dealog/dealog-common" }]'
        servers: '[{"id": "github", "username": "${{ secrets.SERVER_USERNAME }}", "password": "${{ secrets.SERVER_PASSWORD }}"}]'
    - name: Build with Maven
      run: |
        ./mvnw versions:set -DnewVersion=${{ env.VERSION }}
        ./mvnw package --file pom.xml --batch-mode --settings ~/.m2/settings.xml -Pnative -Dquarkus.native.container-build=true
    - name: Build Docker image
      uses: whoan/docker-build-with-cache-action@v5
      with:
        username: "${{ secrets.AWS_ACCESS_KEY_ID }}"
        password: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        image_name: ${{ env.IMAGE_REPO }}
        image_tag: ${{ env.VERSION }}
        registry: ${{ env.REGISTRY }}
        dockerfile: ./src/main/docker/Dockerfile.native
    - name: Push Docker image to AWS ECS
      uses: jwalton/gh-ecr-push@v1
      with:
        access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        region: ${{ env.AWS_REGION }}
        image: ${{ env.FULL_IMAGE_NAME }}:${{ env.VERSION }}