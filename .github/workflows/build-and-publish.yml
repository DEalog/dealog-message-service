name: Build Maven project, dockerize & publish

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Maven project

    steps:
    - uses: actions/checkout@v2

    - name: Set env
      run: |
        echo ::set-env name=VERSION::$(git describe --exact-match --tags 2> /dev/null || echo "1.0.0-SNAPSHOT-$(git rev-parse --short=8 HEAD)")
        echo $VERSION >> version.txt

    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
  
    - name: Setup GraalVM
      uses: ayltai/setup-graalvm@v1
      with:
        java-version: 11
        graalvm-version: 20.2.0

    - name: Create settings.xml
      uses: whelk-io/maven-settings-xml-action@v9
      with:
        repositories: '[{ "id": "github", "name": "dealog-common", "url": "https://maven.pkg.github.com/dealog/dealog-common" }]'
        servers: '[{"id": "github", "username": "${{ secrets.SERVER_USERNAME }}", "password": "${{ secrets.SERVER_PASSWORD }}"}]'

    - name: Build with Maven
      id: build
      run: |
        ./mvnw versions:set -DnewVersion=${{ env.VERSION }}
        ./mvnw package --file pom.xml --batch-mode --settings ~/.m2/settings.xml -Pnative
    
    - name: Create artifact
      uses: actions/upload-artifact@v2
      with:
        name: message-service
        path: |
          ./target/*-runner
          ./version.txt
          ./src/main/docker/Dockerfile.native

  publish:
    runs-on: ubuntu-latest
    name: Dockerize and publish
    needs: build

    steps:
    - name: Fetch artifact
      uses: actions/download-artifact@v2
      with:
        name: message-service

    - name: Set env
      run: |
        echo ::set-env name=VERSION::$(cat ./version.txt)
        echo ::set-env name=IMAGE_REPO::message-service
        echo ::set-env name=AWS_REGION::eu-central-1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      uses: whoan/docker-build-with-cache-action@v5
      with:
        username: "${{ secrets.AWS_ACCESS_KEY_ID }}"
        password: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        image_name: ${{ env.IMAGE_REPO }}
        image_tag: ${{ env.VERSION }}
        registry: ${{ steps.login-ecr.outputs.registry }}
        dockerfile: ./src/main/docker/Dockerfile.native